import { NextResponse } from 'next/server'
import { userInventory, shardInfo } from '@/lib/spawn-storage'

/**
 * GET /api/inventory
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ –∫–∞—Ä—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è)
 */
export async function GET() {
  try {
    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    const userId = "demo-user" // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ user.userId –∏–∑ JWT
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–∫–æ–ª–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const userShards = userInventory.filter(item => item.userId === userId)
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Å–∫–æ–ª–∫–∞—Ö
    const enrichedShards = userShards.map(item => {
      const shard = shardInfo[item.shardId as keyof typeof shardInfo]
      return {
        id: item.id,
        fragmentId: item.shardId,
        shardId: item.shardId,
        label: shard?.label || "?",
        name: shard?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫",
        imageUrl: shard?.imageUrl || "",
        collectedAt: item.collectedAt,
        spawnPointId: item.spawnPointId,
        rarity: "common" as const
      }
    })
    
    console.log(`üì¶ –ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è ${userId}: ${enrichedShards.length} –æ—Å–∫–æ–ª–∫–æ–≤`)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–æ —Å—Ç–∞—Ä—ã–º API
    return NextResponse.json({
      fragments: {
        total: enrichedShards.length,
        byRarity: {
          common: enrichedShards.length,
          uncommon: 0,
          rare: 0,
          epic: 0,
          legendary: 0,
        },
        items: enrichedShards
      },
      cards: {
        total: 0,
        byRarity: {
          common: 0,
          uncommon: 0,
          rare: 0,
          epic: 0,
          legendary: 0,
        },
        items: []
      }
    })
  } catch (error) {
    console.error('Error fetching inventory:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è' },
      { status: 500 }
    )
  }
}
