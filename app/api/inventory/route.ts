import { NextResponse } from 'next/server'
import { userInventory, userCards, shardInfo, cardInfo, userProfiles } from '@/lib/spawn-storage'
import { headers } from 'next/headers'

/**
 * GET /api/inventory?userId=xxx
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ –∫–∞—Ä—Ç—ã
 */
export async function GET(request: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId') || 'demo-user'
    
    console.log(`üì¶ –ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`)
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–∫–æ–ª–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const userShards = userInventory.filter(item => item.userId === userId)
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Å–∫–æ–ª–∫–∞—Ö
    const enrichedShards = userShards.map(item => {
      const shard = shardInfo[item.shardId as keyof typeof shardInfo]
      return {
        id: item.id,
        fragmentId: item.shardId,
        shardId: item.shardId,
        label: shard?.label || "?",
        name: shard?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫",
        imageUrl: shard?.imageUrl || "",
        collectedAt: item.collectedAt,
        spawnPointId: item.spawnPointId,
        rarity: "common" as const
      }
    })
    
    console.log(`üì¶ –ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è ${userId}: ${enrichedShards.length} –æ—Å–∫–æ–ª–∫–æ–≤`)
    
    // –ü–æ–ª—É—á–∞–µ–º NFT –∫–∞—Ä—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const userNFTCards = userCards.filter(item => item.userId === userId)
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username
    const userProfile = userProfiles.find(p => p.id === userId)
    const username = userProfile?.username || userId
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–∞—Ö
    const enrichedCards = userNFTCards.map(item => {
      const card = cardInfo[item.cardId as keyof typeof cardInfo]
      return {
        id: item.id,
        cardId: item.cardId,
        name: card?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
        description: card?.description || "",
        imageUrl: card?.imageUrl || "",
        rarity: card?.rarity || "common",
        craftedAt: item.craftedAt,
        usedShardIds: item.usedShardIds,
        model: item.model,
        background: item.background,
        owner: username // –ò—Å–ø–æ–ª—å–∑—É–µ–º username
      }
    })
    
    console.log(`üé¥ –ö–∞—Ä—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${enrichedCards.length}`)
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    const cardsByRarity = {
      common: enrichedCards.filter(c => (c.rarity as string) === 'common').length,
      uncommon: enrichedCards.filter(c => (c.rarity as string) === 'uncommon').length,
      rare: enrichedCards.filter(c => (c.rarity as string) === 'rare').length,
      epic: enrichedCards.filter(c => (c.rarity as string) === 'epic').length,
      legendary: enrichedCards.filter(c => (c.rarity as string) === 'legendary').length,
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–æ —Å—Ç–∞—Ä—ã–º API
    return NextResponse.json({
      fragments: {
        total: enrichedShards.length,
        byRarity: {
          common: enrichedShards.length,
          uncommon: 0,
          rare: 0,
          epic: 0,
          legendary: 0,
        },
        items: enrichedShards
      },
      cards: {
        total: enrichedCards.length,
        byRarity: cardsByRarity,
        items: enrichedCards
      }
    })
  } catch (error) {
    console.error('Error fetching inventory:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è' },
      { status: 500 }
    )
  }
}
