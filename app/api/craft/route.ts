import { NextRequest, NextResponse } from 'next/server'
import { craftCard, getOrCreateUser } from '@/lib/db-storage'

/**
 * POST /api/craft - –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å NFT –∫–∞—Ä—Ç—É –∏–∑ 3 –æ—Å–∫–æ–ª–∫–æ–≤
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { shardIds, userId: userNickname } = body

    console.log('üé® Craft request:', { shardIds, userNickname })

    if (!shardIds || !Array.isArray(shardIds) || shardIds.length !== 3) {
      return NextResponse.json({
        error: 'Invalid shards',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è 3 –æ—Å–∫–æ–ª–∫–∞ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞'
      }, { status: 400 })
    }

    if (!userNickname) {
      return NextResponse.json({
        error: 'Missing userId',
        message: '–£–∫–∞–∂–∏—Ç–µ userId'
      }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(userNickname)

    // –ö—Ä–∞—Ñ—Ç–∏–º –∫–∞—Ä—Ç—É
    const userCard = await craftCard(user.id, shardIds)

    console.log('üéâ NFT –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', userCard.id)

    return NextResponse.json({
      success: true,
      message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ NFT –∫–∞—Ä—Ç—É "${userCard.card.name}"!`,
      card: {
        id: userCard.id,
        cardId: userCard.card.id,
        name: userCard.card.name,
        description: userCard.card.description,
        imageUrl: userCard.card.imageUrl,
        rarity: userCard.card.rarity,
        craftedAt: userCard.assembledAt
      }
    })

  } catch (error: any) {
    console.error('‚ùå Craft error:', error)
    return NextResponse.json({
      error: 'Craft failed',
      message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É'
    }, { status: 500 })
  }
}
