import { NextRequest, NextResponse } from 'next/server'
import { userInventory, userCards, shardInfo, cardInfo } from '@/lib/spawn-storage'

/**
 * POST /api/craft - –°–∫—Ä–∞—Ñ—Ç–∏—Ç—å NFT –∫–∞—Ä—Ç—É –∏–∑ 3 –æ—Å–∫–æ–ª–∫–æ–≤
 */
export async function POST(request: NextRequest) {
  try {
    const userId = "demo-user" // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ user.userId –∏–∑ JWT
    
    const body = await request.json()
    const { shardIds } = body // –ú–∞—Å—Å–∏–≤ –∏–∑ 3 ID –æ—Å–∫–æ–ª–∫–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
    
    console.log('üî® –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫—Ä–∞—Ñ—Ç:', { userId, shardIds })
    
    if (!shardIds || !Array.isArray(shardIds) || shardIds.length !== 3) {
      return NextResponse.json({
        error: 'Invalid shard IDs',
        message: '–î–ª—è –∫—Ä–∞—Ñ—Ç–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 3 –æ—Å–∫–æ–ª–∫–∞'
      }, { status: 400 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–∫–æ–ª–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userShards = userInventory.filter(item => 
      item.userId === userId && shardIds.includes(item.id)
    )
    
    if (userShards.length !== 3) {
      return NextResponse.json({
        error: 'Shards not found',
        message: '–ù–µ –≤—Å–µ –æ—Å–∫–æ–ª–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ'
      }, { status: 404 })
    }
    
    console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏:', userShards)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –æ—Å–∫–æ–ª–∫–æ–≤ (shard-1, shard-2, shard-3)
    const shardTypes = userShards.map(s => s.shardId).sort()
    const uniqueShardTypes = [...new Set(shardTypes)]
    
    console.log('üîç –¢–∏–ø—ã –æ—Å–∫–æ–ª–∫–æ–≤:', shardTypes)
    console.log('üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã:', uniqueShardTypes)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ–ª–∂–Ω—ã –±—ã—Ç—å 3 –†–ê–ó–ù–´–• –æ—Å–∫–æ–ª–∫–∞ (A, B, C)
    if (uniqueShardTypes.length !== 3) {
      return NextResponse.json({
        error: 'Invalid shard combination',
        message: '‚ùå –ù—É–∂–Ω—ã 3 –†–ê–ó–ù–´–• –æ—Å–∫–æ–ª–∫–∞ (A + B + C)! –ù–µ–ª—å–∑—è –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Å–∫–æ–ª–∫–∏.'
      }, { status: 400 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Å–µ –æ—Å–∫–æ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
    const cardIds = userShards.map(s => s.cardId)
    const uniqueCardIds = [...new Set(cardIds)]
    
    console.log('üé¥ ID –∫–∞—Ä—Ç:', cardIds)
    console.log('üé¥ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –∫–∞—Ä—Ç:', uniqueCardIds)
    
    if (uniqueCardIds.length !== 1) {
      return NextResponse.json({
        error: 'Mixed card shards',
        message: '‚ùå –í—Å–µ –æ—Å–∫–æ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç –æ–¥–Ω–æ–π NFT –∫–∞—Ä—Ç—ã! –ù–µ–ª—å–∑—è —Å–º–µ—à–∏–≤–∞—Ç—å –æ—Å–∫–æ–ª–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ä—Ç.'
      }, { status: 400 })
    }
    
    const cardId = uniqueCardIds[0]
    const card = cardInfo[cardId as keyof typeof cardInfo]
    
    if (!card) {
      return NextResponse.json({
        error: 'Card not found',
        message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      }, { status: 404 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
    const requiredShards = card.requiredShards.sort()
    const providedShards = shardTypes
    
    const isValidCombination = requiredShards.every((shard, index) => shard === providedShards[index])
    
    if (!isValidCombination) {
      return NextResponse.json({
        error: 'Invalid shard types',
        message: `‚ùå –î–ª—è –∫–∞—Ä—Ç—ã "${card.name}" —Ç—Ä–µ–±—É—é—Ç—Å—è –æ—Å–∫–æ–ª–∫–∏: ${requiredShards.join(', ')}`
      }, { status: 400 })
    }
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∞—Ñ—Ç...')
    
    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    shardIds.forEach(shardId => {
      const index = userInventory.findIndex(item => item.id === shardId)
      if (index !== -1) {
        userInventory.splice(index, 1)
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Å–∫–æ–ª–æ–∫: ${shardId}`)
      }
    })
    
    // –°–æ–∑–¥–∞—ë–º NFT –∫–∞—Ä—Ç—É
    const craftedCardId = `card-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    const craftedCard = {
      id: craftedCardId,
      userId,
      cardId,
      craftedAt: new Date(),
      usedShardIds: shardIds
    }
    
    userCards.push(craftedCard)
    
    console.log('üéâ NFT –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', craftedCard)
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    console.log('  - –û—Å–∫–æ–ª–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å:', userInventory.filter(i => i.userId === userId).length)
    console.log('  - –ö–∞—Ä—Ç —Å–æ–±—Ä–∞–Ω–æ:', userCards.filter(c => c.userId === userId).length)
    
    return NextResponse.json({
      success: true,
      message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ NFT –∫–∞—Ä—Ç—É "${card.name}"!`,
      card: {
        id: craftedCardId,
        cardId,
        name: card.name,
        description: card.description,
        imageUrl: card.imageUrl,
        rarity: card.rarity,
        craftedAt: craftedCard.craftedAt
      }
    })
    
  } catch (error) {
    console.error('Error during craft:', error)
    return NextResponse.json({ 
      error: 'Failed to craft',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã'
    }, { status: 500 })
  }
}
