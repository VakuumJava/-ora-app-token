import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { isTokenExpired } from '@/lib/email'

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const token = searchParams.get('token')

    console.log('üîç Email verification attempt:', { 
      token: token ? `${token.substring(0, 10)}...` : 'missing',
      url: request.url 
    })

    if (!token) {
      console.log('‚ùå No token provided')
      const redirectUrl = getRedirectUrl(request, '/login?error=invalid_token')
      return NextResponse.redirect(redirectUrl)
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const user = await prisma.user.findFirst({
      where: {
        verificationToken: token,
      },
    })

    if (!user) {
      console.log('‚ùå User not found for token')
      const redirectUrl = getRedirectUrl(request, '/login?error=invalid_token')
      return NextResponse.redirect(redirectUrl)
    }

    console.log('‚úÖ User found:', { userId: user.id, email: user.email })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    if (user.verificationTokenExpiry && isTokenExpired(user.verificationTokenExpiry)) {
      console.log('‚ùå Token expired:', user.verificationTokenExpiry)
      const redirectUrl = getRedirectUrl(request, '/login?error=token_expired')
      return NextResponse.redirect(redirectUrl)
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
    await prisma.user.update({
      where: { id: user.id },
      data: {
        emailVerified: true,
        verificationToken: null,
        verificationTokenExpiry: null,
      },
    })

    console.log('‚úÖ Email verified successfully for user:', user.email)

    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    const redirectUrl = getRedirectUrl(request, '/?email_verified=true')
    return NextResponse.redirect(redirectUrl)
  } catch (error) {
    console.error('‚ùå Email verification error:', error)
    const redirectUrl = getRedirectUrl(request, '/login?error=verification_failed')
    return NextResponse.redirect(redirectUrl)
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function getRedirectUrl(request: NextRequest, path: string): URL {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
  const host = request.headers.get('host')
  const protocol = request.headers.get('x-forwarded-proto') || 
                  (host?.includes('localhost') ? 'http' : 'https')
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å APP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  const baseUrl = process.env.APP_URL || 
                  process.env.NEXT_PUBLIC_APP_URL || 
                  `${protocol}://${host}`
  
  console.log('üîó Redirect URL info:', { baseUrl, path, host, protocol })
  
  return new URL(path, baseUrl)
}
