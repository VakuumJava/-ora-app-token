import { NextRequest, NextResponse } from 'next/server'
import { userCards, userProfiles } from '@/lib/spawn-storage'

/**
 * POST /api/transfer - –ü–µ—Ä–µ–¥–∞—á–∞ NFT –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { cardId, recipientUsername, userId } = body
    
    console.log('üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É:', { cardId, recipientUsername, userId })
    
    if (!cardId || !recipientUsername || !userId) {
      return NextResponse.json({
        error: 'Missing parameters',
        message: '–£–∫–∞–∂–∏—Ç–µ ID –∫–∞—Ä—Ç—ã, username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ userId'
      }, { status: 400 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    const card = userCards.find(c => c.id === cardId && c.userId === userId)
    
    if (!card) {
      return NextResponse.json({
        error: 'Card not found',
        message: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ'
      }, { status: 404 })
    }
    
    // –û—á–∏—â–∞–µ–º username –æ—Ç @
    const cleanUsername = recipientUsername.replace('@', '').trim()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const recipient = userProfiles.find(u => u.username === cleanUsername)
    
    if (!recipient) {
      return NextResponse.json({
        error: 'User not found',
        message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${cleanUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`
      }, { status: 404 })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Å–∞–º–æ–º—É —Å–µ–±–µ
    if (recipient.id === userId) {
      return NextResponse.json({
        error: 'Cannot transfer to self',
        message: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ'
      }, { status: 400 })
    }
    
    // –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞—Ä—Ç—É
    card.userId = recipient.id
    
    console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞:', {
      cardId,
      from: userId,
      to: recipient.id,
      username: recipient.username
    })
    
    return NextResponse.json({
      success: true,
      message: `‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${recipient.username}!`,
      transfer: {
        cardId,
        from: userId,
        to: recipient.id,
        toUsername: recipient.username,
        timestamp: new Date()
      }
    })
    
  } catch (error) {
    console.error('Error during transfer:', error)
    return NextResponse.json({ 
      error: 'Failed to transfer',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞—Ä—Ç—ã'
    }, { status: 500 })
  }
}
