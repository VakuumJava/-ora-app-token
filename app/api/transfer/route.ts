import { NextRequest, NextResponse } from 'next/server'
import { transferCard, getOrCreateUser } from '@/lib/db-storage'

/**
 * POST /api/transfer - –ü–µ—Ä–µ–¥–∞—á–∞ NFT –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { cardId, recipientUsername, userId: fromNickname } = body
    
    console.log('üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É:', { cardId, recipientUsername, fromNickname })
    
    if (!cardId || !recipientUsername || !fromNickname) {
      return NextResponse.json({
        error: 'Missing parameters',
        message: '–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fromUser = await getOrCreateUser(fromNickname)

    // –û—á–∏—â–∞–µ–º username –æ—Ç @
    const cleanUsername = recipientUsername.replace('@', '').trim()

    // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—É
    const toUser = await transferCard(cardId, fromUser.id, cleanUsername)

    console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞:', {
      cardId,
      from: fromUser.nickname,
      to: toUser.nickname
    })

    return NextResponse.json({
      success: true,
      message: `‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${toUser.nickname}!`
    })

  } catch (error: any) {
    console.error('Error during transfer:', error)
    return NextResponse.json({ 
      error: 'Failed to transfer',
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∫–∞—Ä—Ç—ã'
    }, { status: 500 })
  }
}
