import { NextRequest, NextResponse } from 'next/server'
import { userCards } from '@/lib/spawn-storage'

/**
 * POST /api/mint/mock - Mock –º–∏–Ω—Ç NFT (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 * –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π blockchain –º–∏–Ω—Ç
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { cardId, userId, chain } = body

    console.log('üé® Mock –º–∏–Ω—Ç NFT:', { cardId, userId, chain })

    if (!cardId || !userId) {
      return NextResponse.json({
        error: 'Missing parameters',
        message: '–£–∫–∞–∂–∏—Ç–µ cardId –∏ userId'
      }, { status: 400 })
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const card = userCards.find(c => c.id === cardId && c.userId === userId)

    if (!card) {
      return NextResponse.json({
        error: 'Card not found',
        message: '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ'
      }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–º–∏–Ω—á–µ–Ω–∞
    if (card.tokenId) {
      return NextResponse.json({
        error: 'Already minted',
        message: '–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –∑–∞–º–∏–Ω—á–µ–Ω–∞'
      }, { status: 400 })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock tokenId
    const tokenId = `${chain}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º tokenId –≤ –∫–∞—Ä—Ç–µ
    card.tokenId = tokenId
    card.mintedAt = new Date()
    card.chain = chain

    console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–º–∏–Ω—á–µ–Ω–∞:', {
      cardId,
      tokenId,
      chain
    })

    return NextResponse.json({
      success: true,
      message: `üéâ NFT —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω –Ω–∞ ${chain.toUpperCase()}!`,
      tokenId,
      chain,
      card: {
        id: card.id,
        name: card.cardId,
        tokenId,
        mintedAt: card.mintedAt
      }
    })

  } catch (error) {
    console.error('Error during mock mint:', error)
    return NextResponse.json({
      error: 'Failed to mint',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ'
    }, { status: 500 })
  }
}
