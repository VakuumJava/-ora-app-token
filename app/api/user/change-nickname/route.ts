import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { verifyAccessToken } from '@/lib/jwt'

/**
 * POST /api/user/change-nickname
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å—Ç–∞—Ä—ã–π)
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è cookie (accessToken –∏ access_token)
    const token = request.cookies.get('access_token')?.value || 
                  request.cookies.get('accessToken')?.value

    console.log('üîê Change nickname attempt:', { 
      hasToken: !!token,
      cookies: request.cookies.getAll().map(c => c.name)
    })

    if (!token) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const payload = verifyAccessToken(token)
    if (!payload) {
      console.log('‚ùå Invalid token')
      return NextResponse.json({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 })
    }

    console.log('‚úÖ User authenticated:', { userId: payload.userId, currentNickname: payload.nickname })

    const { newNickname } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!newNickname || newNickname.length < 3 || newNickname.length > 20) {
      return NextResponse.json(
        { error: '–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤' },
        { status: 400 }
      )
    }

    if (!/^[a-zA-Z0-9_]+$/.test(newNickname)) {
      return NextResponse.json(
        { error: '–ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const existingUser = await prisma.user.findFirst({
      where: {
        nickname: {
          equals: newNickname,
          mode: 'insensitive',
        },
      },
    })

    if (existingUser && existingUser.id !== payload.userId) {
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç' },
        { status: 409 }
      )
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
    await prisma.user.update({
      where: { id: payload.userId },
      data: { nickname: newNickname },
    })

    console.log('‚úÖ Nickname changed successfully:', { 
      userId: payload.userId, 
      oldNickname: payload.nickname, 
      newNickname 
    })

    return NextResponse.json(
      { message: '–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω', newNickname },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå Error changing nickname:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞' },
      { status: 500 }
    )
  }
}
