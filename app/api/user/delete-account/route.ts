import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { verifyAccessToken } from '@/lib/jwt'

/**
 * DELETE /api/user/delete-account
 * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç nickname –∏ email)
 */
export async function DELETE(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è cookie (accessToken –∏ access_token)
    const token = request.cookies.get('access_token')?.value || 
                  request.cookies.get('accessToken')?.value

    console.log('üîê Delete account attempt:', { 
      hasToken: !!token,
      cookies: request.cookies.getAll().map(c => c.name)
    })

    if (!token) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const payload = verifyAccessToken(token)
    if (!payload) {
      console.log('‚ùå Invalid token')
      return NextResponse.json({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 })
    }

    console.log('‚ö†Ô∏è Deleting account:', { userId: payload.userId, email: payload.email })

    const userId = payload.userId

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.$transaction(async (tx) => {
      // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏
      await tx.session.deleteMany({
        where: { userId },
      })

      // –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await tx.userFragment.deleteMany({
        where: { userId },
      })

      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      await tx.profile.deleteMany({
        where: { userId },
      })

      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç email –∏ nickname)
      await tx.user.delete({
        where: { id: userId },
      })
    })

    // –û—á–∏—â–∞–µ–º cookies (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π)
    const response = NextResponse.json(
      { message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' },
      { status: 200 }
    )

    response.cookies.delete('access_token')
    response.cookies.delete('refresh_token')
    response.cookies.delete('accessToken')
    response.cookies.delete('refreshToken')

    console.log('‚úÖ Account deleted successfully:', { userId })

    return response
  } catch (error) {
    console.error('‚ùå Error deleting account:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞' },
      { status: 500 }
    )
  }
}
