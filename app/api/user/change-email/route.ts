import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'
import { verifyAccessToken } from '@/lib/jwt'
import { generateVerificationToken, sendVerificationEmail } from '@/lib/email'

/**
 * POST /api/user/change-email
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ email (—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ email)
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è cookie (accessToken –∏ access_token)
    const token = request.cookies.get('access_token')?.value || 
                  request.cookies.get('accessToken')?.value

    console.log('üîê Change email attempt:', { 
      hasToken: !!token,
      cookies: request.cookies.getAll().map(c => c.name)
    })

    if (!token) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 })
    }

    const payload = verifyAccessToken(token)
    if (!payload) {
      console.log('‚ùå Invalid token')
      return NextResponse.json({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 })
    }

    console.log('‚úÖ User authenticated:', { userId: payload.userId, email: payload.email })

    const { newEmail } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!newEmail || !newEmail.includes('@')) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ email –Ω–µ –∑–∞–Ω—è—Ç
    const existingUser = await prisma.user.findUnique({
      where: { email: newEmail.toLowerCase() },
    })

    if (existingUser && existingUser.id !== payload.userId) {
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' },
        { status: 409 }
      )
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationToken = generateVerificationToken()
    const verificationTokenExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –∏ —Ç–æ–∫–µ–Ω–∞ (emailVerified = false –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    await prisma.user.update({
      where: { id: payload.userId },
      data: {
        email: newEmail.toLowerCase(),
        emailVerified: false,
        verificationToken,
        verificationTokenExpiry,
      },
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ –Ω–æ–≤—ã–π email
    try {
      await sendVerificationEmail(newEmail, verificationToken)
      console.log('‚úÖ Verification email sent to:', newEmail)
    } catch (emailError) {
      console.error('‚ùå Failed to send verification email:', emailError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    }

    return NextResponse.json(
      { message: '–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π email' },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå Error changing email:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email' },
      { status: 500 }
    )
  }
}
