import { NextRequest, NextResponse } from 'next/server'
import { calculateDistance } from '@/lib/geo-utils'
import { collectShard, getOrCreateUser } from '@/lib/db-storage'
import { prisma } from '@/lib/db'

/**
 * POST /api/checkin - –°–æ–±—Ä–∞—Ç—å –æ—Å–∫–æ–ª–æ–∫ —Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { spawnPointId, userLat, userLng, userId: userNickname } = body

    console.log('üìç Checkin request:', { spawnPointId, userLat, userLng, userNickname })

    if (!spawnPointId || !userLat || !userLng || !userNickname) {
      return NextResponse.json({
        error: 'Missing parameters',
        message: '–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await getOrCreateUser(userNickname)

    // –ù–∞—Ö–æ–¥–∏–º spawn point
    const spawnPoint = await prisma.spawnPoint.findUnique({
      where: { id: spawnPointId },
      include: {
        shard: {
          include: {
            card: true
          }
        }
      }
    })

    if (!spawnPoint) {
      return NextResponse.json({
        error: 'Spawn point not found',
        message: '–¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      }, { status: 404 })
    }

    if (!spawnPoint.active) {
      return NextResponse.json({
        error: 'Spawn point inactive',
        message: '–≠—Ç–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫
    if (spawnPoint.expiresAt && spawnPoint.expiresAt < new Date()) {
      return NextResponse.json({
        error: 'Spawn point expired',
        message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ –∏—Å—Ç–µ–∫'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–æ–±–∏—Ä–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–æ–π —Ç–æ—á–∫–∏
    const alreadyCollected = await prisma.userShard.findFirst({
      where: {
        userId: user.id,
        shardId: spawnPoint.shardId
      }
    })

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const distance = calculateDistance(
      userLat,
      userLng,
      spawnPoint.latitude,
      spawnPoint.longitude
    )

    console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(2)}–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${spawnPoint.radius}–º`)

    if (distance > spawnPoint.radius) {
      return NextResponse.json({
        error: 'Too far',
        message: `–í—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –Ω–∞ ${Math.ceil(distance - spawnPoint.radius)}–º`
      }, { status: 400 })
    }

    // –°–æ–±–∏—Ä–∞–µ–º –æ—Å–∫–æ–ª–æ–∫
    const userShard = await collectShard(user.id, spawnPoint.shardId)

    console.log('‚úÖ –û—Å–∫–æ–ª–æ–∫ —Å–æ–±—Ä–∞–Ω:', userShard.id)

    return NextResponse.json({
      success: true,
      message: 'ÔøΩÔøΩ –û—Å–∫–æ–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!',
      shard: {
        id: userShard.id,
        label: userShard.shard.label,
        cardName: userShard.shard.card.name,
        imageUrl: userShard.shard.imageUrl,
        collectedAt: userShard.collectedAt
      }
    })

  } catch (error: any) {
    console.error('‚ùå Checkin error:', error)
    return NextResponse.json({
      error: 'Internal error',
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
}
