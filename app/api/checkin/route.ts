import { NextRequest, NextResponse } from 'next/server'
import { getUserFromCookies } from '@/lib/jwt'
import { calculateDistance } from '@/lib/geo-utils'
import { tempSpawnPoints, shardInfo } from '@/lib/spawn-storage'

/**
 * POST /api/checkin - –ß–µ–∫–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–æ—á–∫–µ —Å–ø–∞–≤–Ω–∞
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –¥–µ–º–æ)
    // const user = await getUserFromCookies()
    // if (!user || !user.userId) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    // }

    const body = await request.json()
    const { spawnPointId, userLat, userLng, accuracy } = body

    console.log('üéØ –ß–µ–∫–∏–Ω –∑–∞–ø—Ä–æ—Å:', { spawnPointId, userLat, userLng })

    if (!spawnPointId || userLat === undefined || userLng === undefined) {
      return NextResponse.json(
        { error: 'Spawn point ID and user coordinates are required' },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const spawnPoint = tempSpawnPoints.find((sp: any) => sp.id === spawnPointId)

    console.log('üìç –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞:', spawnPoint)
    console.log('üì¶ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', tempSpawnPoints.length)

    if (!spawnPoint) {
      return NextResponse.json({ 
        error: 'Spawn point not found',
        message: '–¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.'
      }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (!spawnPoint.active) {
      return NextResponse.json({ 
        error: 'Spawn point is not active',
        message: '–≠—Ç–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (spawnPoint.expiresAt && new Date(spawnPoint.expiresAt) < new Date()) {
      return NextResponse.json({ 
        error: 'Spawn point has expired',
        message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–π —Ç–æ—á–∫–∏ –∏—Å—Ç–µ–∫'
      }, { status: 400 })
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ—á–∫–æ–π —Å–ø–∞–≤–Ω–∞
    const distance = calculateDistance(
      userLat,
      userLng,
      spawnPoint.latitude,
      spawnPoint.longitude
    )

    console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(2)}–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${spawnPoint.radius || 5}–º`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–¥–∏—É—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–µ—Ç—Ä–æ–≤)
    const requiredRadius = spawnPoint.radius || 5
    if (distance > requiredRadius) {
      return NextResponse.json({
        error: 'Too far from spawn point',
        distance,
        requiredRadius,
        message: `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ ${Math.round(distance)}–º –æ—Ç —Ç–æ—á–∫–∏. –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è ${requiredRadius}–º).`
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å GPS
    if (accuracy && accuracy > 50) {
      return NextResponse.json({
        error: 'GPS accuracy too low',
        accuracy,
        message: '–¢–æ—á–Ω–æ—Å—Ç—å GPS —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.'
      }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–∫–æ–ª–∫–µ
    const shard = shardInfo[spawnPoint.shardId as keyof typeof shardInfo]
    
    if (!shard) {
      return NextResponse.json({ 
        error: 'Shard not found',
        message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å–∫–æ–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      }, { status: 404 })
    }

    console.log('‚úÖ –ß–µ–∫–∏–Ω —É—Å–ø–µ—à–µ–Ω! –û—Å–∫–æ–ª–æ–∫:', shard.label)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –¥–µ–º–æ)
    return NextResponse.json({
      success: true,
      message: 'üéâ –û—Å–∫–æ–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!',
      shard: {
        id: spawnPoint.id,
        label: shard.label,
        cardName: shard.name,
        imageUrl: shard.imageUrl,
        collectedAt: new Date()
      }
    })
  } catch (error) {
    console.error('Error during checkin:', error)
    return NextResponse.json({ error: 'Failed to checkin' }, { status: 500 })
  }
}
