'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { X, Send, DollarSign, Coins, Loader2, AlertCircle } from 'lucide-react'
import { useTonAddress, useTonConnectUI } from '@tonconnect/ui-react'

interface CardDetailsModalProps {
  card: {
    id: string
    cardId: string
    name: string
    description: string
    imageUrl: string
    rarity: string
    craftedAt: Date
    owner?: string
    userId?: string // UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model?: string
    background?: string
  }
  totalMinted: number
  maxSupply: number
  floorPrice: number | null
  onClose: () => void
  onTransfer: (username: string) => Promise<void>
  onMint: (chain: 'ton' | 'eth') => Promise<void>
}

export function CardDetailsModal({ 
  card, 
  totalMinted, 
  maxSupply,
  floorPrice,
  onClose,
  onTransfer,
  onMint
}: CardDetailsModalProps) {
  const [showTransferInput, setShowTransferInput] = useState(false)
  const [showMintOptions, setShowMintOptions] = useState(false)
  const [transferUsername, setTransferUsername] = useState('')
  const [isTransferring, setIsTransferring] = useState(false)
  const [isMinting, setIsMinting] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // TON Connect
  const tonAddress = useTonAddress()
  const [tonConnectUI] = useTonConnectUI()
  const isTonConnected = !!tonAddress

  const handleTransfer = async () => {
    if (!transferUsername.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
      return
    }

    setIsTransferring(true)
    setError(null)

    try {
      await onTransfer(transferUsername)
      onClose()
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ')
    } finally {
      setIsTransferring(false)
    }
  }

  const handleMint = async (chain: 'ton' | 'eth') => {
    if (chain === 'ton' && !isTonConnected) {
      tonConnectUI.openModal()
      return
    }

    setIsMinting(true)
    setError(null)

    try {
      if (chain === 'ton') {
        // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–ª–∏ localStorage
        const userId = card.userId || localStorage.getItem('qora_autologin_userId')
        
        if (!userId) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')
        }
        
        console.log('üé® –ú–∏–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏:', { userId, cardId: card.id, walletAddress: tonAddress })
        
        // –†–µ–∞–ª—å–Ω—ã–π TON –º–∏–Ω—Ç —á–µ—Ä–µ–∑ TonConnect
        const response = await fetch('/api/mint/ton', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: userId, // UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cardId: card.id,
            walletAddress: tonAddress,
          })
        })

        const data = await response.json()

        if (!response.ok) {
          throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TonConnect
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', data.transaction)
        const result = await tonConnectUI.sendTransaction(data.transaction)
        
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', result)

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–∏–Ω—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const confirmResponse = await fetch('/api/mint/ton', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            cardId: card.id,
            txHash: result.boc, // transaction hash
          })
        })

        const confirmData = await confirmResponse.json()

        if (!confirmResponse.ok) {
          throw new Error(confirmData.error || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∏–Ω—Ç–∞')
        }

        alert(`‚úÖ ${confirmData.message}\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${confirmData.explorerUrl}`)
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        await onMint(chain)
        
        onClose()
      } else {
        throw new Error('Ethereum –º–∏–Ω—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
      }
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞:', err)
      if (err.message && !err.message.includes('User rejects')) {
        setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–µ')
      }
    } finally {
      setIsMinting(false)
    }
  }

  // –†–∞–Ω–¥–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const model = card.model || 'Hellfire'
  const background = card.background || 'Neon Blue'
  const owner = card.owner || 'demo_user'

  return (
    <div className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-[#1c1c1e] rounded-3xl max-w-md w-full overflow-hidden shadow-2xl">
        {/* Header */}
        <div className="relative p-4 border-b border-white/10">
          <button 
            onClick={onClose}
            className="absolute right-4 top-4 text-gray-400 hover:text-white transition"
          >
            <X className="w-6 h-6" />
          </button>
          <h2 className="text-xl font-semibold text-white pr-8">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ</h2>
        </div>

        {/* Scrollable Content */}
        <div className="max-h-[70vh] overflow-y-auto">
          {/* Card Image */}
          <div className="p-4">
            <div className="rounded-2xl overflow-hidden bg-white/5">
              <img 
                src={card.imageUrl} 
                alt={card.name}
                className="w-full h-64 object-cover"
              />
            </div>
          </div>

          {/* Info Table - Telegram Style */}
          <div className="px-4 pb-4">
            <div className="bg-[#2c2c2e] rounded-2xl overflow-hidden">
              {/* –í–ª–∞–¥–µ–ª–µ—Ü */}
              <div className="flex items-center justify-between p-4 border-b border-white/5">
                <span className="text-gray-400 text-sm">–í–ª–∞–¥–µ–ª–µ—Ü</span>
                <div className="flex items-center gap-2">
                  <div className="w-6 h-6 rounded-full bg-blue-500 flex items-center justify-center text-xs font-bold">
                    {owner.charAt(0).toUpperCase()}
                  </div>
                  <span className="text-white font-medium">@{owner}</span>
                </div>
              </div>

              {/* –ú–æ–¥–µ–ª—å */}
              <div className="flex items-center justify-between p-4 border-b border-white/5">
                <span className="text-gray-400 text-sm">–ú–æ–¥–µ–ª—å</span>
                <span className="text-white font-medium">{model} <span className="text-blue-400 text-xs">0.5%</span></span>
              </div>

              {/* –§–æ–Ω */}
              <div className="flex items-center justify-between p-4 border-b border-white/5">
                <span className="text-gray-400 text-sm">–§–æ–Ω</span>
                <span className="text-white font-medium">{background} <span className="text-blue-400 text-xs">2%</span></span>
              </div>

              {/* –ù–∞–ª–∏—á–∏–µ (–í—ã–ø—É—â–µ–Ω–æ) */}
              <div className="flex items-center justify-between p-4 border-b border-white/5">
                <span className="text-gray-400 text-sm">–í—ã–ø—É—Å—Ç–∏–ª–∏</span>
                <span className="text-white font-medium">{totalMinted}/{maxSupply}</span>
              </div>

              {/* –¶–µ–Ω–Ω–æ—Å—Ç—å */}
              <div className="flex items-center justify-between p-4">
                <span className="text-gray-400 text-sm">–¶–µ–Ω–Ω–æ—Å—Ç—å</span>
                <button 
                  onClick={() => {
                    if (floorPrice === null) {
                      alert('–ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–∏—Ö –∫–∞—Ä—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –≤—ã—Å—Ç–∞–≤–∏—Ç –µ—ë –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!')
                    }
                  }}
                  className="text-blue-400 font-medium hover:underline text-sm"
                >
                  {floorPrice ? `$${floorPrice.toFixed(2)}` : 'None'} –ø–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
              </div>
            </div>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mx-4 mb-4 p-3 bg-red-500/10 border border-red-500/30 rounded-xl flex items-start gap-2">
              <AlertCircle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
              <p className="text-sm text-red-400">{error}</p>
            </div>
          )}

          {/* Transfer Input */}
          {showTransferInput && (
            <div className="px-4 pb-4">
              <div className="bg-[#2c2c2e] rounded-2xl p-4">
                <label className="block text-sm text-gray-400 mb-2">
                  Username –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                </label>
                <input
                  type="text"
                  value={transferUsername}
                  onChange={(e) => setTransferUsername(e.target.value)}
                  placeholder="@username"
                  className="w-full px-4 py-3 bg-[#1c1c1e] border border-white/10 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-blue-500 transition"
                  autoFocus
                />
                <div className="flex gap-2 mt-3">
                  <Button
                    onClick={() => setShowTransferInput(false)}
                    variant="outline"
                    className="flex-1 bg-transparent border-white/10 text-white hover:bg-white/5"
                    disabled={isTransferring}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button
                    onClick={handleTransfer}
                    disabled={isTransferring || !transferUsername.trim()}
                    className="flex-1 bg-blue-500 hover:bg-blue-600 text-white"
                  >
                    {isTransferring ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        –ü–µ—Ä–µ–¥–∞—á–∞...
                      </>
                    ) : (
                      '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
                    )}
                  </Button>
                </div>
              </div>
            </div>
          )}

          {/* Mint Options */}
          {showMintOptions && (
            <div className="px-4 pb-4">
              <div className="bg-[#2c2c2e] rounded-2xl p-4">
                <p className="text-sm text-gray-400 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –º–∏–Ω—Ç–∞:</p>
                
                {/* TON Network */}
                <div className="space-y-2">
                  <button
                    onClick={() => isTonConnected ? handleMint('ton') : tonConnectUI.openModal()}
                    disabled={isMinting}
                    className="w-full p-4 bg-[#1c1c1e] hover:bg-[#0088cc]/20 border border-white/10 hover:border-[#0088cc] rounded-xl text-left transition disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-[#0088cc] flex items-center justify-center">
                        <Coins className="w-5 h-5 text-white" />
                      </div>
                      <div className="flex-1">
                        <p className="text-white font-medium">TON Network</p>
                        {isTonConnected ? (
                          <p className="text-xs text-green-400">‚úì –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: {tonAddress.slice(0, 8)}...{tonAddress.slice(-6)}</p>
                        ) : (
                          <p className="text-xs text-yellow-400">‚ö† –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫</p>
                        )}
                      </div>
                    </div>
                  </button>
                  
                  {/* Ethereum */}
                  <button
                    onClick={() => handleMint('eth')}
                    disabled={isMinting}
                    className="w-full p-4 bg-[#1c1c1e] hover:bg-purple-500/20 border border-white/10 hover:border-purple-500 rounded-xl text-left transition disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-purple-500 flex items-center justify-center">
                        <Coins className="w-5 h-5 text-white" />
                      </div>
                      <div className="flex-1">
                        <p className="text-white font-medium">Ethereum</p>
                        <p className="text-xs text-gray-400">MetaMask —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω</p>
                      </div>
                    </div>
                  </button>
                </div>
                <Button
                  onClick={() => setShowMintOptions(false)}
                  variant="outline"
                  className="w-full mt-3 bg-transparent border-white/10 text-white hover:bg-white/5"
                  disabled={isMinting}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </div>
          )}
        </div>

        {/* Action Buttons - Telegram Style */}
        {!showTransferInput && !showMintOptions && (
          <div className="p-4 border-t border-white/10 bg-[#1c1c1e]">
            <div className="grid grid-cols-3 gap-2">
              {/* –ü–µ—Ä–µ–¥–∞—Ç—å */}
              <button
                onClick={() => setShowTransferInput(true)}
                className="flex flex-col items-center gap-2 p-4 bg-[#34c759]/10 hover:bg-[#34c759]/20 rounded-2xl transition"
              >
                <div className="w-12 h-12 rounded-full bg-[#34c759] flex items-center justify-center">
                  <Send className="w-6 h-6 text-white" />
                </div>
                <span className="text-xs text-white font-medium">–ü–µ—Ä–µ–¥–∞—Ç—å</span>
              </button>

              {/* –ü—Ä–æ–¥–∞—Ç—å - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ */}
              <button
                onClick={() => alert('–§—É–Ω–∫—Ü–∏—è "–ü—Ä–æ–¥–∞—Ç—å" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞')}
                className="flex flex-col items-center gap-2 p-4 bg-white/5 hover:bg-white/10 rounded-2xl transition opacity-50 cursor-not-allowed"
                disabled
              >
                <div className="w-12 h-12 rounded-full bg-gray-600 flex items-center justify-center">
                  <DollarSign className="w-6 h-6 text-white" />
                </div>
                <span className="text-xs text-gray-400 font-medium">–ü—Ä–æ–¥–∞—Ç—å</span>
              </button>

              {/* Mint */}
              <button
                onClick={() => setShowMintOptions(true)}
                className="flex flex-col items-center gap-2 p-4 bg-blue-500/10 hover:bg-blue-500/20 rounded-2xl transition"
              >
                <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center">
                  <Coins className="w-6 h-6 text-white" />
                </div>
                <span className="text-xs text-white font-medium">Mint</span>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
