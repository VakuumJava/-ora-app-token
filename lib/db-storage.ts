/**
 * Database Storage - –∑–∞–º–µ–Ω–∞ file-persistence –Ω–∞ Prisma
 * –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ PostgreSQL
 */

import { prisma } from './db'

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ spawn points
 */
export async function getActiveSpawnPoints() {
  return await prisma.spawnPoint.findMany({
    where: {
      active: true,
      OR: [
        { expiresAt: null },
        { expiresAt: { gt: new Date() } }
      ]
    },
    include: {
      shard: {
        include: {
          card: true
        }
      }
    }
  })
}

/**
 * –°–æ–∑–¥–∞—Ç—å spawn point
 */
export async function createSpawnPoint(data: {
  shardId: string
  latitude: number
  longitude: number
  radius?: number
  expiresAt?: Date
}) {
  return await prisma.spawnPoint.create({
    data: {
      shardId: data.shardId,
      latitude: data.latitude,
      longitude: data.longitude,
      radius: data.radius || 5,
      expiresAt: data.expiresAt,
      active: true
    },
    include: {
      shard: {
        include: {
          card: true
        }
      }
    }
  })
}

/**
 * –°–æ–±—Ä–∞—Ç—å –æ—Å–∫–æ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
export async function collectShard(userId: string, shardId: string) {
  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –æ—Å–∫–æ–ª–∫–µ
  const userShard = await prisma.userShard.create({
    data: {
      userId,
      shardId,
      used: false
    },
    include: {
      shard: {
        include: {
          card: true
        }
      }
    }
  })

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await prisma.user.update({
    where: { id: userId },
    data: {
      totalShards: { increment: 1 }
    }
  })

  return userShard
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserInventory(userId: string) {
  const [shards, cards] = await Promise.all([
    prisma.userShard.findMany({
      where: {
        userId,
        used: false // —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
      },
      include: {
        shard: {
          include: {
            card: true
          }
        }
      },
      orderBy: {
        collectedAt: 'desc'
      }
    }),
    prisma.userCard.findMany({
      where: {
        userId,
        minted: false // —Ç–æ–ª—å–∫–æ –Ω–µ –∑–∞–º–∏–Ω—á–µ–Ω–Ω—ã–µ
      },
      include: {
        card: true
      },
      orderBy: {
        assembledAt: 'desc'
      }
    })
  ])

  return { shards, cards }
}

/**
 * –ö—Ä–∞—Ñ—Ç –∫–∞—Ä—Ç—ã –∏–∑ 3 –æ—Å–∫–æ–ª–∫–æ–≤
 */
export async function craftCard(userId: string, shardIds: string[]) {
  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–∫–æ–ª–∫–∏
  const userShards = await prisma.userShard.findMany({
    where: {
      id: { in: shardIds },
      userId,
      used: false
    },
    include: {
      shard: true
    }
  })

  if (userShards.length !== 3) {
    throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è 3 –æ—Å–∫–æ–ª–∫–∞')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–∫–æ–ª–∫–∏ –æ—Ç –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
  const cardIds = [...new Set(userShards.map(us => us.shard.cardId))]
  if (cardIds.length !== 1) {
    throw new Error('–í—Å–µ –æ—Å–∫–æ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã')
  }

  const cardId = cardIds[0]

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ 3 —Ç–∏–ø–∞ (A, B, C)
  const labels = userShards.map(us => us.shard.label).sort()
  if (labels.join(',') !== 'A,B,C') {
    throw new Error('–ù—É–∂–Ω—ã –æ—Å–∫–æ–ª–∫–∏ A, B –∏ C')
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∏ –ø–æ–º–µ—á–∞–µ–º –æ—Å–∫–æ–ª–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
  const [userCard] = await prisma.$transaction([
    prisma.userCard.create({
      data: {
        userId,
        cardId,
        minted: false
      },
      include: {
        card: true
      }
    }),
    prisma.userShard.updateMany({
      where: {
        id: { in: shardIds }
      },
      data: {
        used: true
      }
    }),
    prisma.user.update({
      where: { id: userId },
      data: {
        totalCards: { increment: 1 }
      }
    }),
    prisma.card.update({
      where: { id: cardId },
      data: {
        mintedCount: { increment: 1 }
      }
    })
  ])

  return userCard
}

/**
 * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –º–∏–Ω—Ç–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ blockchain)
 */
export async function deleteCardAfterMint(userCardId: string, tokenId: string, txHash: string) {
  // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–º–∏–Ω—á–µ–Ω–Ω—É—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  await prisma.userCard.delete({
    where: { id: userCardId }
  })

  console.log(`üóëÔ∏è –ö–∞—Ä—Ç–∞ ${userCardId} —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –º–∏–Ω—Ç–∞ (tokenId: ${tokenId})`)
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ nickname
 */
export async function getOrCreateUser(nickname: string) {
  let user = await prisma.user.findUnique({
    where: { nickname }
  })

  if (!user) {
    user = await prisma.user.create({
      data: {
        nickname,
        email: `${nickname}@temp.qora.app`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π email
        passwordHash: 'none', // –ü–æ–∫–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è
        totalShards: 0,
        totalCards: 0
      }
    })
    console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', nickname)
  }

  return user
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserStats(userId: string) {
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: {
      totalShards: true,
      totalCards: true,
      createdAt: true,
      _count: {
        select: {
          shards: { where: { used: false } },
          cards: { where: { minted: false } }
        }
      }
    }
  })

  if (!user) {
    throw new Error('User not found')
  }

  return {
    totalShards: user._count.shards,
    totalCards: user._count.cards,
    daysOnSite: Math.floor((Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24)),
    shardsFound: user.totalShards,
    cardsOwned: user.totalCards
  }
}

/**
 * –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function transferCard(userCardId: string, fromUserId: string, toNickname: string) {
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const toUser = await prisma.user.findUnique({
    where: { nickname: toNickname }
  })

  if (!toUser) {
    throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${toNickname} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
  }

  if (toUser.id === fromUserId) {
    throw new Error('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å–∞–º–æ–º—É —Å–µ–±–µ')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
  const userCard = await prisma.userCard.findFirst({
    where: {
      id: userCardId,
      userId: fromUserId
    }
  })

  if (!userCard) {
    throw new Error('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ')
  }

  // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—É
  await prisma.userCard.update({
    where: { id: userCardId },
    data: {
      userId: toUser.id
    }
  })

  return toUser
}
