import fs from 'fs'
import path from 'path'

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = path.join(process.cwd(), 'data')
const DATA_FILE = path.join(DATA_DIR, 'app-data.json')

export interface PersistedData {
  spawnPoints: any[]
  userInventory: any[]
  userCards: any[]
  userProfiles: any[]
  lastSaved: string
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
function ensureDataDir() {
  if (!fs.existsSync(DATA_DIR)) {
    fs.mkdirSync(DATA_DIR, { recursive: true })
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', DATA_DIR)
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
 */
export function loadPersistedData(): PersistedData | null {
  try {
    ensureDataDir()
    
    if (!fs.existsSync(DATA_FILE)) {
      console.log('‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π')
      return null
    }

    const fileContent = fs.readFileSync(DATA_FILE, 'utf-8')
    const data = JSON.parse(fileContent)
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞:', {
      spawnPoints: data.spawnPoints?.length || 0,
      userInventory: data.userInventory?.length || 0,
      userCards: data.userCards?.length || 0,
      userProfiles: data.userProfiles?.length || 0,
      lastSaved: data.lastSaved
    })
    
    return data
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    return null
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
 */
export function savePersistedData(data: PersistedData): boolean {
  try {
    ensureDataDir()
    
    const dataToSave = {
      ...data,
      lastSaved: new Date().toISOString()
    }
    
    fs.writeFileSync(DATA_FILE, JSON.stringify(dataToSave, null, 2), 'utf-8')
    
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:', {
      spawnPoints: data.spawnPoints.length,
      userInventory: data.userInventory.length,
      userCards: data.userCards.length,
      userProfiles: data.userProfiles.length
    })
    
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error)
    return false
  }
}

/**
 * –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
 */
let autoSaveInterval: NodeJS.Timeout | null = null

export function startAutoSave(getData: () => PersistedData, intervalMinutes = 5) {
  if (autoSaveInterval) {
    clearInterval(autoSaveInterval)
  }
  
  autoSaveInterval = setInterval(() => {
    const data = getData()
    savePersistedData(data)
    console.log('üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
  }, intervalMinutes * 60 * 1000)
  
  console.log(`‚è∞ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω—É—Ç)`)
}

export function stopAutoSave() {
  if (autoSaveInterval) {
    clearInterval(autoSaveInterval)
    autoSaveInterval = null
    console.log('‚èπÔ∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  }
}
