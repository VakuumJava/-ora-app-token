import { loadPersistedData, savePersistedData, startAutoSave, type PersistedData } from './file-persistence'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ—á–µ–∫ —Å–ø–∞–≤–Ω–∞ (—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ)
// –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ API
export const tempSpawnPoints: any[] = []

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
const persistedData = loadPersistedData()
if (persistedData) {
  tempSpawnPoints.push(...persistedData.spawnPoints)
  console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ spawn points:', tempSpawnPoints.length)
}

// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É ID –æ—Å–∫–æ–ª–∫–æ–≤ –∏ –ª–µ–π–±–ª–∞–º–∏
export const shardMapping: Record<string, string> = {
  "shard-1": "A",
  "shard-2": "B",
  "shard-3": "C",
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ NFT –∫–∞—Ä—Ç–∞—Ö (–¥–ª—è –¥–µ–º–æ - –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞)
export const cardInfo = {
  "card-1": {
    id: "card-1",
    name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ Qora",
    description: "–ú–æ—â–Ω–∞—è NFT –∫–∞—Ä—Ç–∞ –∏–∑ –æ—Å–∫–æ–ª–∫–æ–≤ –¥—Ä–µ–≤–Ω–æ—Å—Ç–∏",
    imageUrl: "/craftedstone.png", // –†–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    rarity: "legendary" as const,
    requiredShards: ["shard-1", "shard-2", "shard-3"], // –¢—Ä–µ–±—É–µ—Ç—Å—è A+B+C
    maxSupply: 2000 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø—É—Å–∫–∞
  }
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å–∫–æ–ª–∫–∞—Ö (—Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞—Ä—Ç–µ)
export const shardInfo = {
  "shard-1": {
    label: "A",
    imageUrl: "/elements/shard-1.png",
    name: "–û—Å–∫–æ–ª–æ–∫ A",
    cardId: "card-1" // –ö –∫–∞–∫–æ–π –∫–∞—Ä—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
  },
  "shard-2": {
    label: "B",
    imageUrl: "/elements/shard-2.png",
    name: "–û—Å–∫–æ–ª–æ–∫ B",
    cardId: "card-1"
  },
  "shard-3": {
    label: "C",
    imageUrl: "/elements/shard-3.png",
    name: "–û—Å–∫–æ–ª–æ–∫ C",
    cardId: "card-1"
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ë–î
export interface CollectedShard {
  id: string // ID –∑–∞–ø–∏—Å–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
  userId: string // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º "demo-user")
  shardId: string // "shard-1", "shard-2", "shard-3"
  cardId: string // ID –∫–∞—Ä—Ç—ã –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Å–∫–æ–ª–æ–∫
  spawnPointId: string // ID —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞, –æ—Ç–∫—É–¥–∞ —Å–æ–±—Ä–∞–Ω
  collectedAt: Date
}

export const userInventory: CollectedShard[] = []
if (persistedData) {
  userInventory.push(...persistedData.userInventory.map((s: any) => ({
    ...s,
    collectedAt: new Date(s.collectedAt)
  })))
  console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Å–∫–æ–ª–∫–æ–≤:', userInventory.length)
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö NFT –∫–∞—Ä—Ç
export interface CollectedCard {
  id: string // ID –∑–∞–ø–∏—Å–∏
  userId: string
  cardId: string // ID –∫–∞—Ä—Ç—ã (card-1, card-2, etc)
  craftedAt: Date
  usedShardIds: string[] // ID –æ—Å–∫–æ–ª–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
  model: string // –†–∞–Ω–¥–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å
  background: string // –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–æ–Ω
  mintedOn?: 'ton' | 'ethereum' // –ù–∞ –∫–∞–∫–æ–π —Å–µ—Ç–∏ –∑–∞–º–∏–Ω—á–µ–Ω–æ
  txHash?: string // –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–∏–Ω—Ç–∞
  tokenId?: string // ID —Ç–æ–∫–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
  mintedAt?: Date // –î–∞—Ç–∞ –º–∏–Ω—Ç–∞
  chain?: string // –¶–µ–ø—å (ton/eth)
  owner?: string // Username –≤–ª–∞–¥–µ–ª—å—Ü–∞
}

export const userCards: CollectedCard[] = []
if (persistedData) {
  userCards.push(...persistedData.userCards.map((c: any) => ({
    ...c,
    craftedAt: new Date(c.craftedAt),
    mintedAt: c.mintedAt ? new Date(c.mintedAt) : undefined
  })))
  console.log('üé¥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç:', userCards.length)
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export interface UserProfile {
  id: string
  username: string
  tonWallet?: string
  ethWallet?: string
  createdAt: Date
}

export const userProfiles: UserProfile[] = []
if (persistedData) {
  userProfiles.push(...persistedData.userProfiles.map((p: any) => ({
    ...p,
    createdAt: new Date(p.createdAt)
  })))
  console.log('üë§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userProfiles.length)
}

// –†–∞–Ω–¥–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Ñ–æ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç
export const cardModels = ["Hellfire", "Frostbite", "Shadow", "Celestial", "Inferno"]
export const cardBackgrounds = ["Neon Blue", "Dark Purple", "Golden Sunset", "Mystic Green", "Blood Red"]

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
 */
export function saveAllData() {
  const data: PersistedData = {
    spawnPoints: tempSpawnPoints,
    userInventory,
    userCards,
    userProfiles,
    lastSaved: new Date().toISOString()
  }
  return savePersistedData(data)
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */
if (typeof window === 'undefined') {
  // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  startAutoSave(() => ({
    spawnPoints: tempSpawnPoints,
    userInventory,
    userCards,
    userProfiles,
    lastSaved: new Date().toISOString()
  }), 5)
  
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞')
}
